Модуль в Python — это файл с расширением .py
Пакет — это каталог, который включает в себя другие каталоги и модули и дополнительно содержит файл __init__.py

Для Python, как и для других языков программирования, существуют так называемые репозитории пакетов,
которые называются также индексами. PyPI (Python Package Index, pypi.org) — официальный репозиторий (хранилище)
программного обеспечения для Python.

pip — стандартный менеджер пакетов для Python, система управления пакетами, которая используется для установки
и управления программными пакетами, написанными на Python.

pip install package-name - чтобы установить пакет package-name
python3 -m pip install --upgrade pip - чтобы обновить pip
pip install package-name --upgrade — обновляет версию пакета.
pip install --user package-name — устанавливает пакет в глобальное окружение текущего пользователя.
pip install -r requirements.txt — устанавливает библиотеки, перечисленные в txt-файле.
pip uninstall package-name — удаляет пакеты.
pip freeze — выводит список установленных пакетов в необходимом формате, обычно в requirements.txt.
pip list — выводит список установленных пакетов.
pip list --outdated — выводит список устаревших пакетов.
pip show package-name — показывает информацию об установленном пакете.


Точки входа — это готовые к исполнению программы, содержащиеся в пакете.
Зависимости — это библиотеки, которые нужны проекту для работы.
Проблема заключается в том, что Python не различает версии в каталоге site-packages, в который всё по умолчанию устанавливает.
Виртуальное окружение — это директория, которая содержит все необходимые исполняемые файлы для работы с пакетами,
которые потребуются проекту на Python.

python3 -m venv venv - чтобы создать виртуальное окружение

Структура виртуального окружения:
venv
├───Include
├───Lib
│   └───site-packages
│       ├───pip
│       ├───pip-22.3.1.dist-info
│       ├───pkg_resources
│       ├───setuptools
│       ├───setuptools-65.5.0.dist-info
└───Scripts
        activate
        activate.bat
        Activate.ps1
        deactivate.bat
        pip.exe
        pip3.11.exe
        pip3.exe
        python.exe
        pythonw.exe

Scripts — это файлы, которые взаимодействуют с виртуальным окружением. Среди этих файлов находится копия
(или символическая ссылка на оригинал) интерпретатора под именем
python, а также копия исполняемого файла pip.
Lib/site-packages — здесь находятся библиотеки, уже установленные в окружение, в том числе пакет pip(а исполняемый файл
Scripts/pip — его точка входа). Также можно увидеть другие пакеты, минимально необходимые для разработки проекта на Python.

venv/Scripts/python
 — запуск python.

venv/Scripts/pip install pandas
 — установка пакета.

venv/Scripts/activate.bat
 — активация окружения.

python
 — запуск python в окружении.

pip install pandas
 — установка пакета в окружение.

При работе в виртуальном окружении нужно запускать не системные python и pip,
а эти же исполняемые файлы из директории Scripts

Чтобы не использовать постоянно префикс venv/Scripts/(т. е. путь до команды) для запуска pip или python, воспользуйтесь
активацией виртуального окружения. Для этого выполните файл-сценарий activate, иногда — activate.bat.

Пакетный менеджер Poetry
Poetry — это менеджер пакетов (менеджер зависимостей) Python, который позволяет одновременно создавать
виртуальное окружение и управлять зависимостями проекта. В Poetry есть единый файл спецификации pyproject.toml,
в котором содержится основная информация по пакету (проекту).

Poetry — это аналог встроенного менеджера пакетов pip.

brew install poetry - чтобы установить
poetry init - чтобы включить для существующих проектов
poetry new package-name - создает с нуля и подготавливает структуру проекта с учетом будущей работы с этим пакетным менеджером.

Мы указываем имя пакета — и создается папка, внутри которой сразу имеется следующая структура директорий и файлов:
README.md
 — описание проекта.

package-name
 — директория, где будет храниться код проекта.

pyproject.toml
 — файл конфигурации проекта.

tests
 — директория, где будут храниться тесты.

Команды для работы с Poetry
poetry env use python3.8 — создать виртуальное окружение, указав версию интерпретатора.
poetry shell — активировать виртуальное окружение.
exit — выйти из виртуального окружения.
poetry run python main.py — запустить файл python без активации виртуального окружения.

Если в случае использования pip надо не забыть добавить эту зависимость в requirements.txt (через pip freeze > requirements.txt),
то в случае с Poetry эта зависимость автоматически добавляется в файл pyproject.toml

poetry remove requests — удалить зависимость из проекта.
poetry show --tree — посмотреть всё дерево зависимостей.
poetry show --latest — просмотреть, последние ли версии используются в проекте.

Многие инструменты, полезные при разработке проекта, также являются пакетами и устанавливаются как зависимости к проекту.
Например, фреймворк для написания тестов pytest. Устанавливать эти зависимости на продакшене нет необходимости.
Poetry позволяет описать такие пакеты в виде отдельной группы зависимостей, а к конечному пользователю попадут
только зависимости из основной группы [tool.poetry.dependencies].
# Добавить зависимость pytest в группу dev.dependencies
poetry add -G dev pytest
# В pyproject.toml появляется новая группа зависимостей
[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"

Скрипты в Poetry — это названия, которые ассоциированы с указанным путем до модуля или функции,
которые будут исполнены интерпретатором Python.