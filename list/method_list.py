# Позволяет добавить элемент в конец списка: имя_списка.append(элемент)
from typing import List

a = [1, 3, 'apple']
a.append('banana')
print(a)

a = [1, 3, 5]
a += [4]  # можно также добавить
print(a)

a = ['hi'] + a  # так мы можем добавить в начало списка
print(a)
# Метод extend позволяет добавлять множество элементов в конец списка: список.extend( [элемент1, элемент2] )

b = ['Suren', 'Jon']
b.extend(['Leon', 'Jimmy'])
print(b)

# В Python существуют два основных способа удаления элементов из списка: По индексу — когда мы знаем порядковый номер
# элемента, с помощью оператора del и метода pop.
# По значению — когда мы знаем, что хотим удалить, но не знаем,
# на какой позиции элемент находится, с помощью метода remove.

# remove удаляет по значению

my_list_1 = ['a', 'b', 'c']
my_list_1.remove('b')
print(my_list_1)

# del — это оператор. Значит, удаляемый объект мы указываем через пробел — никаких круглых скобок!
my_list_2 = ['a', 'b', 'c']

del my_list_2[0]  # указываем индекс в квадратных скобках

# Метод pop кроме удаления элемента по индексу, метод pop возвращает его
numbers = [1, 2, 3]
numbers_new = numbers.pop(0)  # в круглых скобках указываем индекс
print(numbers_new)  # выведет то что удалили, то есть 1
print(numbers)  # выведет список без элемента который удалили

# Если вообще не передавать аргумент этому методу, он удалит последний элемент и вернет его значение.
numbers_1 = [1, 2, 3]
numbers_1_new = numbers_1.pop()
print(numbers_1_new)  # выведет то что удалили, то есть 3
print(numbers_1)  # выведет список без элемента который удалили

# Оператор in применяется для списков и позволяет проверять вхождение в список элемента, однако принцип работы
# отличается от строк — мы всегда проверяем вхождение только одного элемента и значение должно совпадать с точностью.

"a" in ["a", "b", "c"]
#  Вернет True

"x" in ["a", "b", "c"]
#  Вернет False
1 in [1, 2, 3]
#  Вернет True

9 in [1, 2, 3]
#  Вернет False

# если список состоит из инт, то мы можем найти макс и мини значение элементов
number = [1, 3, 5, 9]
print(max(number))
print(min(number))

# можно посчитать сумму списка из инт
number_3 = [1, 3, 5, 9, ]
print(sum(number_3))

# сортировать по возрастанию
print(sorted(number_3))

# сортировать по убыванию
print(sorted(number_3, reverse=True))

# можно сделать копию списка
number_4 = number_3.copy()
print(number_4)

# метод, который ищет элемент в списке и количество
number_5 = [1, 3, 5, 9, 9]

print(number_5.count(9))  # в скобках указываем не индекс, а сам элемент

#  метод, который выдает индекс элемента, если есть одинаковые элементы, то выдаст индекс первого
number_6 = [1, 3, 5, 9, 9, 9]
print(number_6.index(9))  # выведет 3
print(number_6.index(9, 4))  # второй аргумент, это индекс с которого мы начинаем поиск, в этом случае выдаст 4
print(number_6.index(9, 4, 6))  # третий аргумент, это индекс до которого мы будем искать(не включая его)

# метод, который вставит элемент, где вы хотите в списке
number_7 = [0, 1, 3, 4]
number_7.insert(2, 2)  # первый параметр это индекс места, второе само значение
print(number_7)

# метод, который переворачивает список
number_8 = [0, 2, 5, 5, 6464]
number_8.reverse()
print(number_8)

# сортировка списка
number_9 = [1, 4, 5, 53453535, 44534353]
number_9.sort()  # сортировка по возрастанию
print(number_9)
number_9.sort(reverse=True)  # в этом случае сортировка будет по убыванию
print(number_9)
